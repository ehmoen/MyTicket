@page "/events/create"
@using MyTicket.WebApp.Shared.ViewModels
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@rendermode InteractiveServer
@inject CreateEventService CreateEventService
@inject NavigationManager NavigationManager

<ErrorMessageComponent ErrorMessage="@_errorMessage"></ErrorMessageComponent>

<h3>Create Event</h3>

<EditForm Model="@_eventViewModel" OnValidSubmit="CreateEvent">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" class="form-control" @bind-Value="_eventViewModel.Title"></InputText>
        <ValidationMessage For="@(() => _eventViewModel.Title)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <InputText id="Description" class="form-control" @bind-Value="_eventViewModel.Description"></InputText>
        <ValidationMessage For="@(() => _eventViewModel.Description)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="BeginDate">Begin Date</label>
        <InputDate id="BeginDate" class="form-control" @bind-Value="_eventViewModel.BeginDate"/>
        <ValidationMessage For="@(() => _eventViewModel.BeginDate)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="BeginTime">Begin Time</label>
        <input type="time" id="BeginTime" class="form-control" @bind-value="_eventViewModel.BeginTime"/>
        <ValidationMessage For="@(() => _eventViewModel.BeginDate)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="EndDate">Begin Date</label>
        <InputDate id="EndDate" class="form-control" @bind-Value="_eventViewModel.EndDate"/>
        <ValidationMessage For="@(() => _eventViewModel.BeginDate)"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="EndTime">End Time</label>
        <input type="time" id="EndTime" class="form-control" @bind-value="_eventViewModel.EndTime"/>
        <ValidationMessage For="@(() => _eventViewModel.BeginDate)"></ValidationMessage>
    </div>
        
    <div class="form-group">
        <label for="Capacity">Capacity</label>
        <InputNumber id="Capacity" class="form-control" @bind-Value="_eventViewModel.Capacity"/>
        <ValidationMessage For="@(() => _eventViewModel.Capacity)"></ValidationMessage>
    </div>
    
    <div class="form-group">
        <label for="Category">Category</label>
        <InputSelect id="Category" class="form-control" @bind-Value="_eventViewModel.Category">
            <option value="" selected>-- Select Category --</option>
            @foreach (var category in CreateEventService.GetEventCategories())
            {
                <option value="@category">@category</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _eventViewModel.Category)"></ValidationMessage>
    </div>
    
    @if (_eventViewModel.Category == nameof(EventCategoriesEnum.InPerson))
    {
        <div class="form-group">
            <label for="Location">Venue Address</label>
            <InputText id="Location" class="form-control" @bind-Value="_eventViewModel.Location"/>
            <ValidationMessage For="@(() => _eventViewModel.Location)"></ValidationMessage>
        </div>
    }
    else if (_eventViewModel.Category == nameof(EventCategoriesEnum.Online))
    {
        <div class="form-group">
            <label for="EventLink">Event Link</label>
            <InputText id="EventLink" class="form-control" @bind-Value="_eventViewModel.EventLink"/>
            <ValidationMessage For="@(() => _eventViewModel.EventLink)"></ValidationMessage>
        </div>
    }
    <br/>

    <div class="form-group">
        <label for="CoverImage">Cover Image</label>
        <InputFile id="CoverImage" class="form-control" OnChange="@HandleImageUpload" accept=".png" />
        <ValidationMessage For="@(() => _eventViewModel.CoverImage)"></ValidationMessage>
    </div>
    <br/>
    
    @if (_eventViewModel.ImageUrl != null)
    {
        <div class="form-group">
            <label>Uploaded Image:</label>
            <br />
            <img src="@_eventViewModel.ImageUrl" alt="Event Cover Image" />
        </div>
        <br />
        <br />
    }
    
    <br/>
    <ErrorMessageComponent ErrorMessage="@_errorMessage"></ErrorMessageComponent>
    <br/>
    
    <button type="submit" class="btn btn-primary">Create</button>
    <NavLink class="btn btn-secondary" href="/">Cancel</NavLink>
</EditForm>


@code {
    private EventViewModel _eventViewModel = new EventViewModel();

    private string? _errorMessage = string.Empty;

    private async Task CreateEvent()
    {
        _errorMessage = CreateEventService.ValidateEvent(_eventViewModel);

        if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            return;
        }

        await CreateEventService.CreateEventAsync(_eventViewModel);

        // Navigate to the list of created events
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            IBrowserFile file = e.File;
            
            if(file.Size > 500 * 1024)
            {
                _errorMessage = "Image size should be less than 5MB.";
                return;
            }
            
            _eventViewModel.CoverImage = e.File;
            
            // Generate a unique file name
            var fileName = Guid.NewGuid() + Path.GetExtension(_eventViewModel.CoverImage.Name);
            var filePath = Path.Combine("wwwroot", "images", "events", fileName);

            await using var stream = _eventViewModel.CoverImage.OpenReadStream();
            using var image = await Image.LoadAsync(stream);
            image.Mutate(x => x.Resize(300, 169));
            
            // Save the image to the specified path
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await image.SaveAsync(fileStream, new SixLabors.ImageSharp.Formats.Png.PngEncoder());
            
            // Set the ImageUrl to display the uploaded image
            _eventViewModel.ImageUrl = $"/images/events/{fileName}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Image upload failed: {ex.Message}";
        }
    }
}