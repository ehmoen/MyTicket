@using MyTicket.WebApp.Shared.ViewModels
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@inject SharedHelper SharedHelper

@if (EventViewModel != null)
{
    <EditForm Model="@EventViewModel" OnValidSubmit="Save">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="Title">Title</label>
            <InputText id="Title" class="form-control" @bind-Value="EventViewModel.Title"></InputText>
            <ValidationMessage For="@(() => EventViewModel.Title)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="Description">Description</label>
            <InputText id="Description" class="form-control" @bind-Value="EventViewModel.Description"></InputText>
            <ValidationMessage For="@(() => EventViewModel.Description)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="BeginDate">Begin Date</label>
            <InputDate id="BeginDate" class="form-control" @bind-Value="EventViewModel.BeginDate"/>
            <ValidationMessage For="@(() => EventViewModel.BeginDate)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="BeginTime">Begin Time</label>
            <input type="time" id="BeginTime" class="form-control" @bind-value="EventViewModel.BeginTime"/>
            <ValidationMessage For="@(() => EventViewModel.BeginDate)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="EndDate">Begin Date</label>
            <InputDate id="EndDate" class="form-control" @bind-Value="EventViewModel.EndDate"/>
            <ValidationMessage For="@(() => EventViewModel.BeginDate)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="EndTime">End Time</label>
            <input type="time" id="EndTime" class="form-control" @bind-value="EventViewModel.EndTime"/>
            <ValidationMessage For="@(() => EventViewModel.BeginDate)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="Capacity">Capacity</label>
            <InputNumber id="Capacity" class="form-control" @bind-Value="EventViewModel.Capacity"/>
            <ValidationMessage For="@(() => EventViewModel.Capacity)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="Category">Category</label>
            <InputSelect id="Category" class="form-control" @bind-Value="EventViewModel.Category">
                <option value="" selected>-- Select Category --</option>
                @foreach (var category in SharedHelper.GetEventCategories())
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => EventViewModel.Category)"></ValidationMessage>
        </div>

        @if (EventViewModel.Category == nameof(EventCategoriesEnum.InPerson))
        {
            <div class="form-group">
                <label for="Location">Venue Address</label>
                <InputText id="Location" class="form-control" @bind-Value="EventViewModel.Location"/>
                <ValidationMessage For="@(() => EventViewModel.Location)"></ValidationMessage>
            </div>
        }
        else if (EventViewModel.Category == nameof(EventCategoriesEnum.Online))
        {
            <div class="form-group">
                <label for="EventLink">Event Link</label>
                <InputText id="EventLink" class="form-control" @bind-Value="EventViewModel.EventLink"/>
                <ValidationMessage For="@(() => EventViewModel.EventLink)"></ValidationMessage>
            </div>
        }
        <br/>

        <div class="form-group">
            <label for="CoverImage">Cover Image</label>
            <InputFile id="CoverImage" class="form-control" OnChange="@HandleImageUpload" accept=".png"/>
            <ValidationMessage For="@(() => EventViewModel.CoverImage)"></ValidationMessage>
        </div>
        <br/>

        @if (EventViewModel.ImageUrl != null)
        {
            <div class="form-group">
                <label>Uploaded Image:</label>
                <br/>
                <img src="@EventViewModel.ImageUrl" alt="Event Cover Image"/>
            </div>
            <br/>
            <br/>
        }

        <br/>
        @if (ErrorMessageFragment != null)
        {
            @ErrorMessageFragment
        }

        <br/>

        <button type="submit" class="btn btn-primary">Create</button>
        <NavLink class="btn btn-secondary" href="/">Cancel</NavLink>
    </EditForm>
}

@code {
   
    [Parameter]
    public EventViewModel? EventViewModel { get; set; }
    
    [Parameter]
    public string? ErrorMessage { get; set; }
    
    [Parameter]
    public RenderFragment? ErrorMessageFragment { get; set; }

    [Parameter]
    public EventCallback<EventViewModel?> OnEventSaved { get; set; }
    
    private async Task Save()
    {
        await OnEventSaved.InvokeAsync(EventViewModel);
    }
    
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        if(EventViewModel == null)
        {
            return;
        }
        
        try
        {
            IBrowserFile file = e.File;
            
            if(file.Size > 500 * 1024)
            {
                ErrorMessage = "Image size should be less than 5MB.";
                return;
            }
            
            EventViewModel.CoverImage = e.File;
            
            // Generate a unique file name
            var fileName = Guid.NewGuid() + Path.GetExtension(EventViewModel.CoverImage.Name);
            var filePath = Path.Combine("wwwroot", "images", "events", fileName);

            await using var stream = EventViewModel.CoverImage.OpenReadStream();
            using var image = await Image.LoadAsync(stream);
            image.Mutate(x => x.Resize(300, 169));
            
            // Save the image to the specified path
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await image.SaveAsync(fileStream, new SixLabors.ImageSharp.Formats.Png.PngEncoder());
            
            // Set the ImageUrl to display the uploaded image
            EventViewModel.ImageUrl = $"/images/events/{fileName}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Image upload failed: {ex.Message}";
        }
    }
}